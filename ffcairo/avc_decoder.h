#ifndef AVC_DECODER_H
#define AVC_DECODER_H

#include <ffcairo/ffctypes.h>

/**
 * Декодер медиа-потоков
 *
 * Класс-оболочка вокруг AVCodecContext для декодирования медиа
 *
 * @note Для упрощения класс не использует приватные члены и не обеспечивает
 *   безопасность. Пользователь может свободно читать и использовать любые поля,
 *   но не должен пытаться перераспределять объекты или данные внутри них.
 */
class AVCDecoder
{
public:
	
	/**
	 * Контекст кодека
	 */
	AVCodecContext *avDecoder;
	
	/**
	 * Фрейм (кадр)
	 */
	AVFrame *avFrame;
	
	/**
	 * Конструктор
	 */
	AVCDecoder();
	
	/**
	 * Деструктор
	 *
	 * Автоматически закрывает кодек и высобождает ресурсы, если кодек еще
	 * не был закрыт
	 */
	~AVCDecoder();
	
	/**
	 * Открыть кодек
	 */
	bool openDecoder(AVCodecID codec_id, const AVCodecParameters *par = NULL);
	
	/**
	 * Закрыть кодек и высвободить ресурсы
	 */
	void closeDecoder();
	
	/**
	 * Декодировать пакет
	 */
	bool decode(AVPacket *pkt);
	
	/**
	 * Завершить кодирование
	 */
	bool sendEof();
	
	/**
	 * Прочитать пакет
	 */
	bool readFrame(int *got_frame);
	
	/**
	 * Прочитать пакет
	 */
	bool readFrame(AVFrame *frame, int *got_frame);
	
};

/**
 * Декодер видео-потоков
 *
 * @note Для упрощения класс не использует приватные члены и не обеспечивает
 *   безопасность. Пользователь может свободно читать и использовать любые поля,
 *   но не должен пытаться перераспределять объекты или данные внутри них.
 */
class AVCVideoDecoder: public AVCDecoder
{
};

/**
 * Декодер аудио-потоков
 *
 * @note Для упрощения класс не использует приватные члены и не обеспечивает
 *   безопасность. Пользователь может свободно читать и использовать любые поля,
 *   но не должен пытаться перераспределять объекты или данные внутри них.
 */
class AVCAudioDecoder: public AVCDecoder
{
public:
	// TODO
};

#endif // AVC_DECODER_H
